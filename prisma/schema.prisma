generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//бесплатный - 2 генерации в день (200 токенов)
//стандартная - 25 генераций + бесплатный тариф (500 токенов)
//уникальный - 1000 генераций для 1 инструмента
//безлимит - неограниченно

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String?
  password String
  isAdmin  Boolean @default(false)

  freeSubscription     FreeSubscription?
  standardSubscription StandardSubscription?
  yandexChats          YandexChat[]
  openAiChats          OpenAiChat[]
  countChats           Int                   @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FreeSubscription {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  isActive       Boolean  @default(true)
  expirationDate DateTime
  balance        Int      @default(2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StandardSubscription {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  isActive       Boolean  @default(false)
  expirationDate DateTime
  balance        Int      @default(25)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model YandexChat {
  id       Int             @id @default(autoincrement())
  messages yandexMessage[]

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model yandexMessage {
  id   Int    @id @default(autoincrement())
  role String
  text String

  chat   YandexChat @relation(fields: [chatId], references: [id])
  chatId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OpenAiChat {
  id       Int             @id @default(autoincrement())
  messages OpenAiMessage[]

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OpenAiMessage {
  id      Int    @id @default(autoincrement())
  role    String
  content String

  chat   OpenAiChat @relation(fields: [chatId], references: [id])
  chatId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model YandexAPI {
  id       Int    @id @default(autoincrement())
  name     String @unique
  url      String
  apiKey   String
  modelUri String

  completionOptions CompletionOptions?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompletionOptions {
  id          Int     @id @default(autoincrement())
  stream      Boolean
  temperature Float
  maxTokens   String

  yandexApi   YandexAPI @relation(fields: [yandexApiId], references: [id])
  yandexApiId Int       @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OpenAiAPI {
  id           Int    @id @default(autoincrement())
  name         String @unique
  model        String
  apiKey       String
  httpProxyUrl String

  completionOptionsOpenAi CompletionOptionsOpenAi?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompletionOptionsOpenAi {
  id              Int     @id @default(autoincrement())
  stream          Boolean
  temperature     Float
  maxTokensInput  Int     @default(0)
  maxTokensOutput Int     @default(0)

  openAiAPI   OpenAiAPI @relation(fields: [openAiApiId], references: [id])
  openAiApiId Int       @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
